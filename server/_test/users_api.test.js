const mongoose = require('mongoose');
const bcrypt = require('bcrypt');
// eslint-disable-next-line node/no-unpublished-require
const supertest = require('supertest');

const app = require('../app');
const User = require('../models/User');
const { mongoConnection } = require('../utils');

const { expectResponseValues, usersHelper } = require('../testUtils');

const api = supertest(app);
const ENDPOINT_BASE = '/api/users';

describe('/api/users endpoints', () => {
  const initialItems = usersHelper.getInitialItems();

  beforeAll(async () => {
    await mongoConnection.connectToMongo();
    console.log('Test suite connected to Mongo');
  });

  beforeEach(async () => {
    await usersHelper.clearItemsInDB();

    const setupItems = usersHelper.getInitialItems();
    const promises = setupItems.map((item) => usersHelper.postItemToDB(item));

    await Promise.all(promises);
  });

  describe('test environment defaults', () => {
    test('starts with initial items in db', async () => {
      const usersAtStart = await usersHelper.getItemsInDB();
      console.log(usersAtStart);
    });
  });

  describe('GET calls users', () => {
    test('GET default environment with n initial users', async () => {
      // setup
      const response = await api.get(ENDPOINT_BASE);
      expect(response.body).toHaveLength(initialItems.length);
      // assert
      for (const [index, apiItem] of response.body.entries()) {
        expect(apiItem.username).toEqual(initialItems[index].username);
        expect(apiItem.name).toEqual(initialItems[index].name);
        // ** not returned from api
        expect(apiItem.password).not.toBeDefined();
        expect(apiItem.passwordHash).not.toBeDefined();
        // ** generated by api
        expect(Array.isArray(apiItem.blogs)).toBeTruthy();
      }
    });
    test('GET users are returned as json', async () => {
      await api
        .get(ENDPOINT_BASE)
        .expect(200)
        .expect('Content-Type', /application\/json/);
    });

    test('GET users have db-generated id', async () => {
      const response = await api.get(ENDPOINT_BASE).expect(200);

      for (const item of response.body) {
        expect(item.id).toBeDefined();
      }
    });

    test('GET users to not return password or passwordHash', async () => {
      const response = await api.get(ENDPOINT_BASE).expect(200);

      for (const item of response.body) {
        expect(item.password).not.toBeDefined();
        expect(item.passwordHash).not.toBeDefined();
      }
    });
  });
  describe('GET by id calls users', () => {});

  describe('POST calls users', () => {});
  describe('PUT calls users', () => {});
  describe('DELETE calls users', () => {});

  afterAll(async () => {
    const testDBName = process.env.MONGODB_CROSS_APP_DB_TEST;
    await mongoose.connection.useDb(testDBName).dropCollection('users');
    console.log('Dropped db', testDBName);
    await mongoose.connection.close();
    console.log('Disconnected from test db');
  });
});
